#include <iostream>
#include <stdexcept>
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <vector>
#include "../include/imgui/imgui.h"
#include "../include/imgui/backend/imgui_impl_glfw.h"
#include "../include/imgui/backend/imgui_impl_opengl3.h"
#include "../src/Window/Window.h"

struct Tab {
    std::string name;
};

std::vector<Tab> tabs;

#define WIDTH 1920
#define HEIGHT 1080
#define MIN_TAB_WIDTH 600.0f
#define MAX_TAB_HEIGHT 400.f
char INPUT_BUF[2048];

#define ITEM_SIZE_HEIGHT = ImGui::SetNextItemHeight(25);

bool ToolBarActive = true;

template <typename T>
constexpr const T& clamp(const T& v, const T& lo, const T& hi) {
    return (v < lo) ? lo : (hi < v) ? hi : v;
}

void framebuffer_size_callback(GLFWwindow* window, int width, int height) {
    glViewport(0, 0, width, height);
}


void handleToolBar(float& toolbarHeight) {
    ImGui::SetNextWindowPos(ImVec2(0, 0));
    ImGui::SetNextWindowSize(ImVec2(WIDTH, toolbarHeight));
    ImGui::Begin(" ", &ToolBarActive, ImGuiWindowFlags_MenuBar);

    if(ImGui::BeginMenuBar()){
        if(ImGui::BeginMenu("file")){
            if(ImGui::MenuItem("New Scence..")){ }
            if(ImGui::MenuItem("Open Scene..")){ }
            if(ImGui::MenuItem("Save Scenes..")){ }
            if(ImGui::MenuItem("Save Scenes as..")){ }
            if(ImGui::MenuItem("New Project..")){ }
            if(ImGui::MenuItem("Open Project..")){ }
            if(ImGui::MenuItem("Save Project..")){ }
            if(ImGui::MenuItem("Build/Project Setting..")){ }
            if(ImGui::MenuItem("Build & Run..")){ }

            if(ImGui::MenuItem("Exit")){
                ToolBarActive = false;
            }   
            ImGui::EndMenu();
        }
        ImGui::EndMenuBar();  
    }

    if(ImGui::BeginMenuBar()){
        if(ImGui::BeginMenu("Edit")){
            if(ImGui::MenuItem("Open..")){ }

            if(ImGui::MenuItem("Close..")){
                ToolBarActive = false;
            }   
            ImGui::EndMenu();
        }
        ImGui::EndMenuBar();  
    }

    if(ImGui::BeginMenuBar()){
        if(ImGui::BeginMenu("Tools")){
            if(ImGui::MenuItem("Open..")){ }

            if(ImGui::MenuItem("Close..")){
                ToolBarActive = false;
            }   
            ImGui::EndMenu();
        }
        ImGui::EndMenuBar();  
    }

    if(ImGui::BeginMenuBar()){
        if(ImGui::BeginMenu("View")){
            if(ImGui::MenuItem("Open..")){ }

            if(ImGui::MenuItem("Close..")){
                ToolBarActive = false;
            }   
            ImGui::EndMenu();
        }
        ImGui::EndMenuBar();  
    }
    
    //     //if (ImGui::ImageButton("\uf04b", ImVec2(64, 64))) 
    // if (ImGui::Button("U+1F310", ImVec2(24, 24))){
    //     // Code to execute when the image button is clicked
    // }

    ImGui::End();
}

void handleInspectorTab(float toolbarHeight, float projectTabHeight, float& hierarchyTabWidth) {
    // Calculate the width of the viewport
    ImVec2 viewportSize = ImGui::GetMainViewport()->Size;

    // Assuming WIDTH is the width of your window
    float windowWidth = WIDTH;

    // Calculate the X-coordinate to position the window at the top-right corner
    float windowX = viewportSize.x - windowWidth;

    ImGui::SetWindowPos(ImVec2(-0, windowX));
    ImGui::Begin("Inspector", nullptr, ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoTitleBar);

    if (ImGui::BeginTabBar("Inspector#left_tabs_bar")) {
        if (ImGui::BeginTabItem("Inspector View")) {
            ImGui::InputText("search", INPUT_BUF, IM_ARRAYSIZE(INPUT_BUF));
            ImGui::EndTabItem();
        }

        if (ImGui::BeginTabItem("Asset inspector")) {
            ImGui::InputText("search", INPUT_BUF, IM_ARRAYSIZE(INPUT_BUF));
            ImGui::EndTabItem();
        }
        
        ImGui::EndTabBar();
    }

    ImVec2 size = ImGui::GetWindowSize();
    hierarchyTabWidth = size.x;

    ImGui::End();
}

void handleScene(float toolbarHeight, float projectTabHeight, float hierarchyTabWidth, float& inspectorTabWidth) {
    ImGui::SetNextWindowPos(ImVec2(0 + hierarchyTabWidth, toolbarHeight));
    // ImGui::SetNextWindowSize(ImVec2(WIDTH - hierarchyTabWidth - inspectorTabWidth, HEIGHT - toolbarHeight - projectTabHeight));
    ImGui::Begin("Scene", nullptr, ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoTitleBar);

    if (ImGui::BeginTabBar("Scene#left_tabs_bar")) {

        if (ImGui::BeginTabItem("\u25B6 Scene View")) {
            ImGui::InputText("search", INPUT_BUF, IM_ARRAYSIZE(INPUT_BUF));
            ImGui::EndTabItem();
        }

        if (ImGui::BeginTabItem("GUIEditor")) {
            ImGui::InputText("search", INPUT_BUF, IM_ARRAYSIZE(INPUT_BUF));
            ImGui::EndTabItem();
        }

        if (ImGui::BeginTabItem("Game View")) {
            ImGui::InputText("search", INPUT_BUF, IM_ARRAYSIZE(INPUT_BUF));
            ImGui::EndTabItem();
        }
        
        ImGui::EndTabBar();
    }

    ImGui::End();
}

void handleHierarchyTab(float toolbarHeight, float projectTabHeight, float& hierarchyTabWidth) {
    ImGui::SetNextWindowPos(ImVec2(0, toolbarHeight));
    ImGui::Begin("Hierarchy", nullptr, ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoTitleBar);
    
    ImVec2 size = ImGui::GetWindowSize();
    
    if (ImGui::BeginTabBar("Hierarchy#left_tabs_bar")) {
        if (ImGui::BeginTabItem("Hierarchy")) {
            ImGui::InputText("search", INPUT_BUF, IM_ARRAYSIZE(INPUT_BUF));

            ImGui::EndTabItem();
        }
        
        ImGui::EndTabBar();
    }

    for (const auto& tab : tabs) {
       // TODO:: ADD a GameObject
    }

    // Check if right mouse button is clicked in an empty area
    if (ImGui::IsWindowHovered() && ImGui::IsMouseReleased(ImGuiMouseButton_Right) && !ImGui::IsAnyItemHovered()) {
        ImGui::OpenPopup("HierarchyPopup"); // Open the context menu popup
    }

    if (ImGui::BeginPopup("HierarchyPopup")) {
        if (ImGui::MenuItem("Create Empty")) {
            // Add Empty GameObject
        }
        if (ImGui::BeginMenu("3D Object")) {
            if (ImGui::MenuItem("Cube")) {
                // Add code to create a cube
            }
            if (ImGui::MenuItem("Sphere")) {
                // Add code to create a cube
            }
            if (ImGui::MenuItem("Capsule")) {
                // Add code to create a cube
            }
            if (ImGui::MenuItem("Cylinder")) {
                // Add code to create a cube
            }
            if (ImGui::MenuItem("Plane")) {
                // Add code to create a cube
            }
            if (ImGui::MenuItem("Quad")) {
                // Add code to create a cube
            }
            ImGui::EndMenu();
        }
        if (ImGui::MenuItem("Camera")) {
            // Add a new Camera 
        }
        ImGui::EndPopup();
    }
    
    // Add hierarchy items here
    //ImGui::InputText("search", INPUT_BUF, IM_ARRAYSIZE(INPUT_BUF));

    hierarchyTabWidth = size.x;

    ImGui::End();
}


void handleProjectTab(float toolbarHeight, float& projectTabHeight) {
    ImGui::SetWindowPos(ImVec2(0, projectTabHeight));
    ImGui::Begin("Project", nullptr, ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoTitleBar);

    // Check if right mouse button is clicked in an empty area
    if (ImGui::IsWindowHovered() && ImGui::IsMouseReleased(ImGuiMouseButton_Right) && !ImGui::IsAnyItemHovered()) {
        ImGui::OpenPopup("AddTabPopup"); // Open the context menu popup
    }

    if (ImGui::BeginTabBar("Project#left_tabs_bar")) {
        // "Project" tab
        if (ImGui::BeginTabItem("Project")) {
            ImGui::InputText("search", INPUT_BUF, IM_ARRAYSIZE(INPUT_BUF));
            ImGui::EndTabItem();
        }

        // Other tabs
        for (const auto& tab : tabs) {
            if (ImGui::BeginTabItem(tab.name.c_str())) {
                ImGui::InputText("search", INPUT_BUF, IM_ARRAYSIZE(INPUT_BUF));
                ImGui::EndTabItem();
            }
        }

        ImGui::EndTabBar();
    }

    // Context menu for adding tabs
    if (ImGui::BeginPopup("AddTabPopup")) {
        if (ImGui::MenuItem("Add Console")) {
            // Add "Console" tab to the tabs vector
            tabs.push_back({"Console"});
        }
        if (ImGui::MenuItem("Add Log")) {
            // Add "Log" tab to the tabs vector
            tabs.push_back({"Log"});
        }
        if (ImGui::MenuItem("Add Profile")) {
            // Add "Profile" tab to the tabs vector
            tabs.push_back({"Profile"});
        }
        ImGui::EndPopup();
    }

    ImGui::End();
}



int main() {
    // Initialize GLFW
    if (!glfwInit()) {
        std::cerr << "Failed to initialize GLFW" << std::endl;
        return -1;
    }

    // Create a window instance
    Window window(WIDTH, HEIGHT, "ImGui Window");

    // Setup ImGui context
    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO(); (void)io;

    // Setup ImGui GLFW binding
    ImGui_ImplGlfw_InitForOpenGL(window.getWindow(), true);

    // Setup ImGui OpenGL3 binding
    ImGui_ImplOpenGL3_Init("#version 330");

    // Setup ImGui style
    ImGui::StyleColorsDark();

    // Set framebuffer size callback
    glfwSetFramebufferSizeCallback(window.getWindow(), framebuffer_size_callback);

    float toolbarHeight = 40.0f; // Initial toolbar height
    float projectTabHeight = 40.0f; // Initial project tab height
    float hierarchyTabWidth = 200.0f; // Initial hierarchy tab width
    float inspectorTabWidth = 200.0f; // Initial inspector tab width

    // Main loop
    while (!window.shouldClose()) {
        // Poll and handle events
        glfwPollEvents();

        // Start ImGui frame
        ImGui_ImplOpenGL3_NewFrame();
        ImGui_ImplGlfw_NewFrame();
        ImGui::NewFrame();

        // Handle toolbar
        handleToolBar(toolbarHeight);

        // Handle hierarchy tab
        handleHierarchyTab(toolbarHeight, projectTabHeight, hierarchyTabWidth);

        // Handle inspector tab
        handleInspectorTab(toolbarHeight, projectTabHeight, hierarchyTabWidth);

        // Handle project tab
        handleProjectTab(toolbarHeight, projectTabHeight);

        // Handle scene window
        handleScene(toolbarHeight, projectTabHeight, hierarchyTabWidth, inspectorTabWidth);

        // Rendering ImGui
        ImGui::Render();
        int display_w, display_h;
        glfwGetFramebufferSize(window.getWindow(), &display_w, &display_h);
        glViewport(0, 0, display_w, display_h);
        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);

        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());

        // Swap buffers
        window.swapBuffers();
    }

    // Cleanup
    ImGui_ImplOpenGL3_Shutdown();
    ImGui_ImplGlfw_Shutdown();
    ImGui::DestroyContext();

    return 0;
}
